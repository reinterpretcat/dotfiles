syntax on

"
" Plugins installation
source ~/.vimrc.plugins

"
" General settings
set autoindent
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set backspace=indent,eol,start
set ruler
set number

set wildmenu
set showcmd

" search
set incsearch                    " act like search in modern browsers
set hlsearch                     " highlight results
set smartcase                    " try to be smart about cases
set ignorecase                   " ignore case
nnoremap <F3> :set hlsearch!<CR>

set encoding=utf-8 nobomb
set fileencoding=utf-8
set laststatus=2
set nowrap

set cursorline
set cursorcolumn

" Show whitespace characters
set list
set listchars=tab:▸\ ,eol:¬

" set the leader key to comma
let mapleader = ','

"
" Theme
let g:airline_powerline_fonts = 1
let g:airline_detect_paste=1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:solarized_termcolors=256
set background=dark
colorscheme solarized
set ttimeoutlen=50 " delay

let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:show_spaces_that_precede_tabs=1

"
" Navigation
"
" CtrlP
let g:ctrlp_root_markers = ['.ctrlp']
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_cmd = 'CtrlPLastMode'
let g:ctrlp_extensions = ['line']
" allow to close buffer
let g:ctrlp_buffer_func = { 'enter': 'CtrlPMappings' }
function! CtrlPMappings()
	nnoremap <buffer> <silent> <M-d> :call <sid>DeleteBuffer()<cr>
endfunction
function! s:DeleteBuffer()
	let path = fnamemodify(getline('.')[2:], ':p')
	let bufn = matchstr(path, '\v\d+\ze\*No Name')
	exec "bd" bufn ==# "" ? path : bufn
	exec "norm \<F5>"
endfunction
" fzf
let g:fzf_colors =
            \ { 'fg':      ['fg', 'Normal'],
            \ 'bg':      ['bg', 'Normal'],
            \ 'hl':      ['fg', 'Comment'],
            \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
            \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
            \ 'hl+':     ['fg', 'Statement'],
            \ 'info':    ['fg', 'PreProc'],
            \ 'border':  ['fg', 'Ignore'],
            \ 'prompt':  ['fg', 'Conditional'],
            \ 'pointer': ['fg', 'Exception'],
            \ 'marker':  ['fg', 'Keyword'],
            \ 'spinner': ['fg', 'Label'],
            \ 'header': ['fg', 'Comment'] }
nnoremap <silent> <expr> <Leader><Leader> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Ag\<cr>"


" Nerd-tree settings
nmap <silent> <leader>t :NERDTreeTabsToggle<CR>
nmap <silent> <C-n> :NERDTreeFocus<CR>
let g:nerdtree_tabs_open_on_console_startup = 1"
let NERDTreeMinimalUI = 1
" Fix scrolling lag
let NERDTreeHighlightCursorline = 0

"
" Startify
autocmd VimEnter *
            \    if !argc()
            \ |    Startify
            \ |    NERDTree
            \ |    wincmd w
            \ |  endif
let g:startify_lists = [
            \ { 'type': 'dir',       'header': [   'MRU '. getcwd()] },
            \ { 'type': 'files',     'header': [   'MRU']            },
            \ { 'type': 'sessions',  'header': [   'Sessions']       },
            \ { 'type': 'bookmarks', 'header': [   'Bookmarks']      },
            \ { 'type': 'commands',  'header': [   'Commands']       },
            \ ]
let g:startify_skiplist = [
            \ 'COMMIT_EDITMSG',
            \ escape(fnamemodify(resolve($VIMRUNTIME), ':p'), '\') .'doc',
            \ 'bundle/.*/doc',
            \ ]
function! StartifyEntryFormat()
    return 'WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'
endfunction
let g:startify_custom_header = []
let g:startify_files_number = 10
let g:startify_update_oldfiles = 1
let g:startify_change_to_dir = 0

"
" Static analyzer & code completion
"
let g:airline#extensions#ale#enabled = 1
let g:ale_completion_enabled = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '▲'
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
let g:lt_location_list_toggle_map = '<leader>l'
let g:lt_quickfix_list_toggle_map = '<leader>q'
let g:lt_height = 10
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

autocmd FileType java setlocal omnifunc=javacomplete#Complete

let g:ycm_show_diagnostics_ui = 0
let g:ycm_confirm_extra_conf = 0

let g:clang_format#style_options = {
	    \ "Standard" : "C++11",
            \ "BreakBeforeBraces" : "Attach",
            \ "UseTab" : "Never",
            \ "IndentWidth" : 2,
            \ "ColumnLimit" : 100,
            \ "AccessModifierOffset" : -2,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AllowShortFunctionsOnASingleLine" : "true",
	    \}

let g:clang_format#command = 'clang-format-6.0'
"map to <Leader>cf in C++ code
autocmd FileType c,cc,cpp,h,hpp,cu nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cc,cpp,h,hpp,cu vnoremap <buffer><Leader>cf :ClangFormat<CR>

"
" Tag&Search settings
"
"let g:gutentags_trace = 1
nmap <F8> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_compact = 1


"
" Build & Debug
"
let g:vebugger_leader='<Leader>d'

"
" Various
"
"autoread and autowrite
augroup save
	au!
	au FocusLost * wall
augroup END
set nohidden
set nobackup
set noswapfile
set nowritebackup
set autoread
set autowrite
set autowriteall

" undo
set undodir=~/.vim/undo
set undofile
let g:undotree_HelpLine = 0
let g:undotree_WindowLayout = 3
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_HighlightChangedText = 1
nnoremap <F7> :UndotreeToggle<cr>

"
" Highlighting
set colorcolumn=100
" cpp
au BufNewFile,BufRead *.cu set ft=cpp
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
" gradle
au BufNewFile,BufRead *.gradle set filetype=groovy
