[alias]

	# Show custom graph
	g = log --graph --pretty=custom

	# Show custom log
	l = log --pretty=custom

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Diff
	d  = diff
	dc = diff --cached
	ds = diff --staged

	# Commit all changes
	ca = !git add -A && git commit -av

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Checkout
	co  = checkout

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# List remote branches.
	lrb = "!f() { remote="${1:-origin}"; git ls-remote --heads "$remote"; }; f"

[user]
	#email = ilya.builuk@gmail.com
	#name = Ilya Builuk
[push]
	default = simple
[merge]
	tool = vimdiff
	conflictstyle = diff3
[mergetool]
	prompt = false
[core]
	editor = vim

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "status"]

	added = green reverse
	changed = yellow reverse
	untracked = red reverse

[pretty]

	custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
	#                     │        │            │            │             └─ author name
	#                     │        │            │            └─ message
	#                     │        │            └─ date (relative)
	#                     │        └─ decorations (branch, heads or tags)
	#                     └─ hash (abbreviated)
